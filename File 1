from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json
import statistics
from typing import List

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["POST"],
    allow_headers=["*"],
)

# Sample data - replace with your full data later
latency_data = [
    {"region": "apac", "service": "payments", "latency_ms": 191.6, "uptime_pct": 98.504, "timestamp": 20250301},
    # Add all your data points here
]

class RegionRequest(BaseModel):
    regions: List[str]
    threshold_ms: float

@app.post("/analyze-latency")
async def analyze_latency(request: RegionRequest):
    results = {}
    
    for region in request.regions:
        region_data = [item for item in latency_data if item['region'] == region]
        
        if not region_data:
            results[region] = {"avg_latency": 0, "p95_latency": 0, "avg_uptime": 0, "breaches": 0}
            continue
        
        latencies = [item['latency_ms'] for item in region_data]
        uptimes = [item['uptime_pct'] for item in region_data]
        
        avg_latency = statistics.mean(latencies)
        p95_latency = statistics.quantiles(latencies, n=20)[18]
        avg_uptime = statistics.mean(uptimes)
        breaches = sum(1 for latency in latencies if latency > request.threshold_ms)
        
        results[region] = {
            "avg_latency": round(avg_latency, 2),
            "p95_latency": round(p95_latency, 2),
            "avg_uptime": round(avg_uptime, 2),
            "breaches": breaches
        }
    
    return results
